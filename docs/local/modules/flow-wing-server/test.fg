bring Vortex
bring File
bring Err
bring Json
bring Map

fun handleHomePage(req: Vortex::HttpRequest, res: Vortex::HttpResponse) -> nthg {
  var homePage: str, homePageLoadErr: Err::Result = File::read("homePage.html", "r")    /; Handle GET request for the home page

  if (homePageLoadErr != Nir) {
    print(homePageLoadErr.getMessage(), "\n")
    res.send({
      status: 500,
      content_type: "text/html",
      body: `
      <html>
        <body>
          <h1>Error Loading Home Page</h1>
        </body>
      </html>
      `
    })
    return :
  }
  var err: Err::Result = res.send({
    status: 200,
    content_type: "text/html",
    body: homePage
  })
  if err != Nir {
    print("Error sending response: ", err.getMessage(), "\n")
  }
}


fun handleGet(req: Vortex::HttpRequest, res: Vortex::HttpResponse) -> nthg {
  var err: Err::Result = res.send({
    status: 200,
    content_type: "application/json",
    body: `{
      "message": "Welcome to the Flow-Wing Programming Language!"
    }`
  })
  if err != Nir {
    print("Error sending response: ", err.getMessage(), "\n")
  }
}


fun handlePost(req: Vortex::HttpRequest, res: Vortex::HttpResponse) -> nthg {
  const body: Map::String = Json::parseObject(req.body)
  var name: str = body.get("name")
  var err: Err::Result = res.send({
    status: 200,
    content_type: "application/json",
    body: `
       {
         "message": "Welcome to the Flow-Wing Programming Language!",
         "body": ` + body.get("name") + `
       }
       `
  })
}

const port: int = 8080
print("Flow-Wing server starting on port: ", port, "\n")
var server: Vortex::Server = new Vortex::Server(port)
server.setRoute("GET", "/", handleHomePage)
server.setRoute("GET", "/api/welcome", handleGet)
server.setRoute("POST", "/", handlePost)
server.start()
