
fun start_server() -> as nthg decl


fun set_route(method: as str, path: as str, handler: unknown) -> as nthg decl


fun set_middleware(middleware: unknown) -> as nthg decl


fun send_response(client_socket: as int, status: as str, content_type: as str, body: as str) -> as nthg decl


fun send(socket: as int, data: as str, len: as int, flags: as int) -> as nthg decl


fun strlen(s: as str) -> as int decl


fun len(s: as str) -> as int {
  return strlen(s)
}


fun generate_response(content_type: as str, body: as str) -> as str {
  return "HTTP/1.1 200 OK\r\nContent-Type: " + content_type + "\r\nContent-Length: " + len(body) + "\r\n\r\n" + body
}


fun json_response(data: as str) -> str {
  return "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: " + len(data) + "\r\n\r\n" + data
}

type Header = {
  Host: str,
  Connection: str,
  sec_ch_ua: str,
  sec_ch_ua_mobile: bool,
  sec_ch_ua_platform: str,
  Upgrade_Insecure_Requests: int,
  User_Agent: str,
  Sec_Purpose: str,
  Purpose: str,
  Accept: str,
  Sec_Fetch_Site: str,
  Sec_Fetch_Mode: str,
  Sec_Fetch_User: bool,
  Sec_Fetch_Dest: str,
  Accept_Encoding: str,
  Accept_Language: str
}
type HttpRequest = {
  method: str,
  endpoint: str,
  version: str,
  headers: Header
}

fun my_request_handler(client_socket: as int, req: as str, endpoint: as str) -> as nthg {
  if (endpoint == "/json") {
    const json_response_data: str = "{\"message\": \"Hello, JSON!\"}"
    var response: str = generate_response("application/json", json_response_data)
    send_response(client_socket, "200 OK", "application/json", json_response_data)
  }  or if (endpoint == "/text") {
    const plain_text_response: str = "Hello, World!"
    var response: str = generate_response("text/plain", plain_text_response)
    send_response(client_socket, "200 OK", "text/plain", plain_text_response)
  }  else {
    const not_found_response: str = "Not Found"
    var response: str = generate_response("text/plain", not_found_response)
    send_response(client_socket, "404 Not Found", "text/plain", not_found_response)
  }
}


fun log_middleware(client_socket: as int, req: as str, endpoint: as str) -> as nthg {
  print("Request: ", req)
}


fun main() -> nthg {
  set_middleware(log_middleware)
  set_route("GET", "/json", my_request_handler)
  set_route("GET", "/", my_request_handler)
  set_route("GET", "/text", my_request_handler)
  start_server()
}

main()
