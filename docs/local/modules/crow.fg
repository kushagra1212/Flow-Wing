bring File


fun create() -> as str decl


fun destroy() -> as nthg decl


fun addRoute(inout path: as str, inout func: unknown) -> as nthg decl


fun setPort(port: as int) -> as nthg decl


fun runServer() -> as nthg decl


fun handleApi(url: as str) -> as str {
  print(url)
  return "s" + url
}

const homePage: str, homePageLoadErr: Err::Result = File::read("home.html", "r")
const aboutPage: str, aboutPageLoadErr: Err::Result = File::read("about.html", "r")
const contactPage: str, contactPageLoadErr: Err::Result = File::read("contact.html", "r")

fun handleHomeRoute() -> as str {
  if homePageLoadErr != Nir {
    return "Error loading home page: {" + homePageLoadErr.toString() + "}"
  }
  return homePage
}


fun handleAboutRoute() -> as str {
  if aboutPageLoadErr != Nir {
    return "Error loading about page: {" + aboutPageLoadErr.toString() + "}"
  }
  return aboutPage
}


fun handleContactRoute() -> as str {
  if contactPageLoadErr != Nir {
    return "Error loading contact page: {" + contactPageLoadErr.toString() + "}"
  }
  return contactPage
}


fun main() -> nthg {
  var app: str = create()/; Setting up routes

  addRoute("/", handleHomeRoute)
  addRoute("/about", handleAboutRoute)
  addRoute("/contact", handleContactRoute)
  addRoute("/api/<str>", handleApi)
  runServer()
}

main()/#

 /Users/apple/code/per/Flow-Wing/targets/aot-compiler/aot-compiler-build/FlowWing --F=crow.fg -O3 -L=/Users/apple/code/per/Flow-Wing/docs/local/modules -l=crow&& build/bin/crow

MONGOOSE

#include "mongoose.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Function to parse query parameters
static void parse_query(struct mg_str query, char *key, char *value, size_t value_len) {
    char *query_str = strndup(query.ptr, query.len);
    char *key_start = strstr(query_str, key);
    if (key_start) {
        char *value_start = strchr(key_start, '=');
        if (value_start) {
            value_start++;
            char *value_end = strchr(value_start, '&');
            if (!value_end) {
                value_end = query_str + strlen(query_str);
            }
            size_t len = value_end - value_start;
            if (len >= value_len) len = value_len - 1;
            strncpy(value, value_start, len);
            value[len] = '\0';
        }
    }
    free(query_str);
}

// Event handler for HTTP requests
static void handle_request(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
    if (ev == MG_EV_HTTP_REQUEST) {
        struct mg_http_message *msg = (struct mg_http_message *) ev_data;
        
        if (mg_http_match_uri(msg, "/")) {
            // Handle GET request for root
            mg_http_reply(c, 200, "Content-Type: text/html\r\n", "<html><body><h1>Welcome to the Complex Server!</h1></body></html>\n");
        } else if (mg_http_match_uri(msg, "/post")) {
            // Handle POST request
            if (msg->method.len == 4 && mg_strcmp(msg->method, "POST") == 0) {
                mg_http_reply(c, 200, "Content-Type: text/plain\r\n", "POST request received with body:\n%.*s\n", (int) msg->body.len, msg->body.ptr);
            } else {
                mg_http_reply(c, 405, "", "Method Not Allowed\n");
            }
        } else if (mg_http_match_uri(msg, "/json")) {
            // Handle JSON response
            mg_http_reply(c, 200, "Content-Type: application/json\r\n", "{\"message\": \"Hello, JSON!\"}\n");
        } else if (mg_http_match_uri(msg, "/query")) {
            // Handle GET request with query parameters
            char value[128] = {0};
            parse_query(msg->query, "param", value, sizeof(value));
            mg_http_reply(c, 200, "Content-Type: text/plain\r\n", "Query parameter 'param' received with value: %s\n", value);
        } else if (mg_http_match_uri(msg, "/ws")) {
            // Handle WebSocket connection
            mg_set_protocol_websocket(c);
        } else {
            mg_http_reply(c, 404, "", "Not Found\n");
        }
    } else if (ev == MG_EV_WS_MSG) {
        // Handle WebSocket messages
        struct mg_ws_message *wm = (struct mg_ws_message *) ev_data;
        mg_ws_send(c, wm->data.ptr, wm->data.len, WEBSOCKET_OPCODE_TEXT);
    }
}

int main() {
    // Create an instance of Mongoose
    struct mg_mgr mgr;
    struct mg_connection *c;
    
    mg_mgr_init(&mgr, NULL);
    c = mg_bind(&mgr, "8000", handle_request);
    
    // Set the HTTP and WebSocket handler
    mg_set_protocol_http_websocket(c);
    
    printf("Starting server on http://localhost:8000\n");

    // Run the event loop
    for (;;) {
        mg_mgr_poll(&mgr, 1000);
    }

    mg_mgr_free(&mgr);
    return 0;
}















































































































