
fun strCopy(dest: as str, src: as str) -> as str decl


fun strConcat(dest: as str, src: as str) -> as str decl


fun strCompare(str1: as str, str2: as str) -> as int decl


fun strLength(str1: as str) -> as int decl


fun strToUpper(str1: as str) -> as str decl


fun strToLower(str1: as str) -> as str decl


fun strReverse(str1: as str) -> as str decl


fun strTrim(str1: as str) -> as str decl


fun strFind(haystack: as str, needle: as str) -> as str decl


fun strReplace(str1: as str, oldSub: as str, newSub: as str) -> as str decl


fun strSplit(str1: as str, delim: as str) -> as str decl


fun strFindChar(inout str1: as str, inout ch: as str) -> as int decl


fun strCharAt(inout str1: as str, inout index: as int) -> as str decl

module [Str]
fun strCopy(dest: str, src: str) -> str {
  return strCopy(dest, src)
}


fun strConcat(dest: as str, src: as str) -> as str {
  return strConcat(dest, src)
}


fun strCompare(str1: as str, str2: as str) -> as int {
  return strCompare(str1, str2)
}


fun strLength(str1: as str) -> as int {
  return strLength(str1)
}


fun strToUpper(inout str1: str, ) -> as str {
  return strToUpper(str1)
}


fun strToLower(str1: as str) -> as str {
  return strToLower(str1)
}


fun strReverse(str1: as str) -> as str {
  return strReverse(str1)
}


fun strTrim(str1: as str) -> as str {
  return strTrim(str1)
}


fun strFind(haystack: as str, needle: as str) -> as str {
  return strFind(haystack, needle)
}


fun strReplace(inout str1: str, inout oldSub: str, inout newSub: str) -> str {
  return strReplace(str1, oldSub, newSub)
}


fun strSplit(str1: as str, delim: as str) -> as str {
  return strSplit(str1, delim)
}


type Char = {
  c: str
}
fun strFindChar(inout str1: str, inout ch: str) -> int {
  return strFindChar(str1, ch)
}


fun strCharAt(inout str1: str, inout index: int) -> str {
  return strCharAt(str1, index)
}



