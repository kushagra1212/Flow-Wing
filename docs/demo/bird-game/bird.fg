bring {FlowWingAnim} from "FlowWingAnim.fg"

bring {getRandomNumber} from "random.fg"

const screenWidth: int = 1024
const screenHeight: int = 500
const FPS: int = 120
const side: int = 10
type Position = {
  x: deci32,
  y: deci32
}
class Bird {
  const ACTUAL_BIRD_SIZE: deci32 = 360.0d
  var birdSize: deci32 = 90.0d
  var BIRD_TIMMER: deci = 10 / FPS
  var birdTimmer: deci
  const BIRD_SPRITE_SIZE: int = 9
  var birdSpriteIndex: int = 0
  var birdTexturePath: str
  var isBirdAlive: bool
  var birdTexture: Texture
  var birdSpritePosition: Position[9]
  init(birdTexturePath: str) -> nthg {
    self.birdTexturePath = birdTexturePath 
    self.birdTimmer = BIRD_TIMMER 
    self.isBirdAlive = true 
    self.birdSpritePosition = [{
      x: 0.0d,
      y: 0.0d
    }, {
      x: ACTUAL_BIRD_SIZE * 1,
      y: 0.0d
    }, {
      x: ACTUAL_BIRD_SIZE * 2,
      y: 0.0d
    }, {
      x: 0.0d,
      y: ACTUAL_BIRD_SIZE * 1
    }, {
      x: ACTUAL_BIRD_SIZE * 1,
      y: ACTUAL_BIRD_SIZE * 1
    }, {
      x: ACTUAL_BIRD_SIZE * 2,
      y: ACTUAL_BIRD_SIZE * 1
    }, {
      x: 0.0d,
      y: ACTUAL_BIRD_SIZE * 2
    }, {
      x: ACTUAL_BIRD_SIZE * 1,
      y: ACTUAL_BIRD_SIZE * 2
    }, {
      x: ACTUAL_BIRD_SIZE * 2,
      y: ACTUAL_BIRD_SIZE * 2
    }] 
  }


  var pos: Position
  setTexture(birdTexture: Texture) -> nthg {
    self.birdTexture = birdTexture 
  }


  getTexturePath() -> str {
    return self.birdTexturePath
  }


  update(frameTime: deci32) -> nthg {
    birdTimmer = birdTimmer - Decimal(frameTime) 
    if birdTimmer < 0 {
      birdTimmer = BIRD_TIMMER 
      birdSpriteIndex = birdSpriteIndex + 1 
      if birdSpriteIndex >= BIRD_SPRITE_SIZE {
        birdSpriteIndex = 0 
      }
      pos.y = pos.y + frameTime * (1 + 1 * (-150)) 
    }
  }


  isTextureLoaded() -> bool {
    return self.birdTexture.id != 0
  }


  getSource() -> deci32[4] {
    return [birdSpritePosition[birdSpriteIndex].x, birdSpritePosition[birdSpriteIndex].y, ACTUAL_BIRD_SIZE, ACTUAL_BIRD_SIZE]
  }


  getDistination() -> deci32[4] {
    return [Decimal32(screenWidth / 3 - birdSize / 2), Decimal32(screenHeight / 2 - birdSize / 2), birdSize, birdSize]
  }


  getOrigin() -> deci32[2] {
    return [self.pos.x, self.pos.y]
  }


  getRotation() -> deci32 {
    return 0.0d
  }


  getTexture() -> Texture {
    return self.birdTexture
  }


  updateY(frameTime: deci32) -> nthg {
    pos.y = pos.y + frameTime * (1 + 1 * (300)) 
  }


}
class Cloud {
  type AttributeType = {
    source: deci32[4],
    distination: deci32[4],
    origin: deci32[2],
    rotation: deci32
  }
  var clouds: AttributeType[5]
  var cloudTexture: Texture
  var texturePath: str
  init(texturePath: str) -> nthg {
    self.texturePath = texturePath 
    clouds = [{
      source: [0.0d, 0.0d, 250.0d, 166.0d],
      distination: [0.0d, 0.0d, Decimal32(250.0 / 166 * (100)), 100.0d],
      origin: [Decimal32(getRandomNumber(-1 * screenWidth, 0)), -1 * Decimal32(getRandomNumber(0, Int32(screenHeight / 3)))],
      rotation: 0.0d
    }, {
      source: [250.0d, 0.0d, 250.0d, 166.0d],
      distination: [0.0d, 0.0d, Decimal32(250.0 / 166 * (100)), 100.0d],
      origin: [Decimal32(getRandomNumber(-1 * screenWidth, 0)), -1 * Decimal32(getRandomNumber(0, Int32(screenHeight / 3)))],
      rotation: 0.0d
    }, {
      source: [0.0d, 166.0d, 500.0d, 166.0d],
      distination: [0.0d, 0.0d, Decimal32(250.0 / 166 * (100)), 100.0d],
      origin: [Decimal32(getRandomNumber(-1 * screenWidth, 0)), -1 * Decimal32(getRandomNumber(0, Int32(screenHeight / 3)))],
      rotation: 0.0d
    }, {
      source: [0.0d, 332.0d, 250.0d, 166.0d],
      distination: [0.0d, 0.0d, Decimal32(250.0 / 166 * (100)), 100.0d],
      origin: [Decimal32(getRandomNumber(-1 * screenWidth, 0)), -1 * Decimal32(getRandomNumber(0, Int32(screenHeight / 3)))],
      rotation: 0.0d
    }, {
      source: [250.0d, 332.0d, 250.0d, 166.0d],
      distination: [0.0d, 0.0d, Decimal32(250.0 / 166 * (100)), 100.0d],
      origin: [Decimal32(getRandomNumber(-1 * screenWidth, 0)), -1 * Decimal32(getRandomNumber(0, Int32(screenHeight / 3)))],
      rotation: 0.0d
    }, ] 
  }


  setTexture(cloudTexture: Texture) -> nthg {
    self.cloudTexture = cloudTexture 
  }


  getTexture() -> Texture {
    return self.cloudTexture
  }


  getTexturePath() -> str {
    return self.texturePath
  }


  update(frameTime: deci32) -> nthg {
    for var i = 0 to 4 {
      clouds[i].origin[0]= clouds[i].origin[0] + frameTime * ((10))
      if clouds[i].origin[0] > 250.0d {
        clouds[i].origin[0]= Decimal32(getRandomNumber(-2 * screenWidth, -1 * screenWidth))
        clouds[i].origin[1]= -1 * Decimal32(getRandomNumber(0, Int32(screenHeight / 3)))
      }
    }
  }


  draw(inout fgAnim: FlowWingAnim) -> nthg {
    for var i = 0 to 4 {
      fgAnim.drawTexturePro(cloudTexture, clouds[i].source, clouds[i].distination, clouds[i].origin, clouds[i].rotation, fgAnim.colors.WHITE)
    }
  }


}

fun main() -> int {
  const fgAnim: FlowWingAnim = new FlowWingAnim(screenWidth, screenHeight, "snake-game-in-flowwing", FPS)
  fgAnim.createWindow()
  const bird: Bird = new Bird("./assets/bird.png")
  const cloud: Cloud = new Cloud("./assets/3clouds.png")
  bird.setTexture(fgAnim.loadTexture(bird.getTexturePath()))/; Check if textures loaded successfully

  cloud.setTexture(fgAnim.loadTexture(cloud.getTexturePath()))/; Check if textures loaded successfully

  var backgroundTexture: Texture = fgAnim.loadTexture("./assets/skyBackground.png")
  const groundTexture: Texture = fgAnim.loadTexture("./assets/ground.png")
  var mountL1Texture: Texture = fgAnim.loadTexture("./assets/mountain/1mountL1.png")
  var mountL2Texture: Texture = fgAnim.loadTexture("./assets/mountain/1mountL2.png")
  var mount2L2Texture: Texture = fgAnim.loadTexture("./assets/mountain/2mountL2.png")
  var mount1L3Texture: Texture = fgAnim.loadTexture("./assets/mountain/1mountL3.png")
  var mountL1Pos1: Position = {
    x: Decimal32(0),
    y: 0.0d
  }
  var mountL1Pos2: Position = {
    x: Decimal32(-1 * 1542),
    y: 0.0d
  }
  var mountL2Pos1: Position = {
    x: Decimal32(-1 * screenWidth),
    y: 0.0d
  }
  var mount2L2Pos1: Position = {
    x: Decimal32(-1 * screenWidth - getRandomNumber(Int32(screenWidth / 4), Int32(screenWidth / 2))),
    y: 0.0d
  }
  var mount1L3Pos1: Position = {
    x: Decimal32(-1 * screenWidth - getRandomNumber(Int32(screenWidth / 4), Int32(screenWidth))),
    y: 0.0d
  }
  if !bird.isTextureLoaded() || backgroundTexture.id == 0 {/; If any texture failed to load, print error and exit

    fgAnim.traceLog(fgAnim.LOG.ERROR, "Failed to load bird texture")/; Clean up and exit

    fgAnim.unloadTexture(bird.getTexture())
    fgAnim.closeWindow()
    return 1
  }
  while !fgAnim.windowShouldClose() {
    bird.update(fgAnim.getFrameTime())
    {
      mountL1Pos1.x = mountL1Pos1.x + fgAnim.getFrameTime() * 100 
      mountL1Pos2.x = mountL1Pos2.x + fgAnim.getFrameTime() * 100 
      if mountL1Pos1.x > 1542 {
        mountL1Pos1.x = Decimal32(-1 * 1542) 
      }
      if mountL1Pos2.x > 1542 {
        mountL1Pos2.x = Decimal32(-1 * 1542) 
      }
    }
    {
      mountL2Pos1.x = mountL2Pos1.x + fgAnim.getFrameTime() * 10 
      if mountL2Pos1.x > screenWidth + screenWidth / 2 {
        mountL2Pos1.x = Decimal32(-1 * screenWidth) 
      }
    }
    {
      mount2L2Pos1.x = mount2L2Pos1.x + fgAnim.getFrameTime() * 10 
      if mount2L2Pos1.x > screenWidth + screenWidth / 2 {
        mount2L2Pos1.x = Decimal32(-1 * screenWidth) 
      }
    }
    {
      mount1L3Pos1.x = mount1L3Pos1.x + fgAnim.getFrameTime() * 10 
      if mount1L3Pos1.x > screenWidth + screenWidth / 2 {
        mount1L3Pos1.x = Decimal32(-1 * screenWidth - getRandomNumber(Int32(screenWidth / 4), Int32(screenWidth / 2))) 
      }
    }
    if (fgAnim.isKeyPressed(fgAnim.KEYS.KEY_UP) || fgAnim.isKeyDown(fgAnim.KEYS.KEY_UP)) {
      bird.updateY(fgAnim.getFrameTime())
    }
    cloud.update(fgAnim.getFrameTime())
    fgAnim.beginDrawing()
    fgAnim.clearBackground(fgAnim.colors.RED)/; background

    fgAnim.drawTexturePro(backgroundTexture, [0.0d, 0.0d, 3840.0d, 2160.0d], [0.0d, 0.0d, Decimal32(screenWidth), Decimal32(screenHeight)], [0.0d, 0.0d], 0.0d, fgAnim.colors.WHITE)/;clouds

    cloud.draw(fgAnim)/; mount1L2

    fgAnim.drawTexturePro(mountL2Texture, [0.0d, 0.0d, 5975.0d, 1607.0d], [0.0d, Decimal32(screenHeight / 3), Decimal32(screenWidth / 2), Decimal32(screenHeight / 3)], [mountL2Pos1.x, mountL2Pos1.y], 0.0d, fgAnim.colors.WHITE)/; 2mount1L2 

    fgAnim.drawTexturePro(mount2L2Texture, [0.0d, 0.0d, 4461.0d, 1989.0d], [0.0d, Decimal32(screenHeight / 3), Decimal32(screenWidth / 2), Decimal32(screenHeight / 3)], [mount2L2Pos1.x, mount2L2Pos1.y], 0.0d, fgAnim.colors.WHITE)/; 1mount1L3

    fgAnim.drawTexturePro(mount1L3Texture, [0.0d, 0.0d, 6005.0d, 2376.0d], [0.0d, Decimal32(screenHeight / 3), Decimal32(screenWidth / 2), Decimal32(screenHeight / 3)], [mount1L3Pos1.x, mount1L3Pos1.y], 0.0d, fgAnim.colors.WHITE)/; muont1L1

    fgAnim.drawTexturePro(mountL1Texture, [0.0d, 0.0d, 8982.0d, 1542.0d], [0.0d, Decimal32(screenHeight / 3), Decimal32(screenWidth + screenWidth / 2), Decimal32(screenHeight / 3)], [mountL1Pos1.x, mountL1Pos1.y], 0.0d, fgAnim.colors.WHITE)
    fgAnim.drawTexturePro(mountL1Texture, [0.0d, 0.0d, 8982.0d, 1542.0d], [0.0d, Decimal32(screenHeight / 3), Decimal32(screenWidth + screenWidth / 2), Decimal32(screenHeight / 3)], [mountL1Pos2.x, mountL1Pos2.y], 0.0d, fgAnim.colors.WHITE)/; ground

    fgAnim.drawTexturePro(groundTexture, [310.0d, 1250.0d, 5000.0d - 640.0d, 1250.0d], [0.0d, Decimal32(screenHeight / 2 + screenHeight / 10), Decimal32(screenWidth), Decimal32(screenHeight / 2)], [mountL1Pos1.x, mountL1Pos1.y], 0.0d, fgAnim.colors.WHITE)
    fgAnim.drawTexturePro(groundTexture, [310.0d, 1250.0d, 5000.0d - 640.0d, 1250.0d], [0.0d, Decimal32(screenHeight / 2 + screenHeight / 10), Decimal32(screenWidth), Decimal32(screenHeight / 2)], [mountL1Pos2.x, mountL1Pos2.y], 0.0d, fgAnim.colors.WHITE)
    fgAnim.drawTexturePro(bird.getTexture(), bird.getSource(), bird.getDistination(), bird.getOrigin(), bird.getRotation(), fgAnim.colors.WHITE)
    fgAnim.endDrawing()
  }
  fgAnim.closeWindow()
  return 0
}

main()
