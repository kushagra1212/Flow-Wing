type Texture = {
  id: int,
  width: int,
  height: int,
  mipmaps: int,
  format: int
}  /#
type Rectangle =  {
    x:deci ,                 /; Rectangle top-left corner position x
    y:deci ,                 /; Rectangle top-left corner position y
    width:deci ,             /; Rectangle width
    height:deci           /; Rectangle height
}


/; Vector2, 2 components
type Vector2 = {
     x:deci,             /; Vector x component
    y:deci                  /; Vector y component
} 
#/

type Vector2 = {
  x: deci32,
  y: deci32
}
type Rectangle = {
  x: deci32,    /; Rectangle top-left corner position x

  y: deci32,    /; Rectangle top-left corner position y

  width: deci32,    /; Rectangle width

  height: deci32    /; Rectangle height

}

fun InitWindow(width: as int, height: as int, title: as str) -> nthg decl


fun SetTargetFPS(fps: as int) -> nthg decl


fun ClearBackground(color: as int) -> nthg decl


fun WindowShouldClose() -> as bool decl


fun BeginDrawing() -> nthg decl


fun DrawRectangle(posX: as int, posY: as int, width: as int, height: as int, color: as int) -> nthg decl


fun DrawRectangleLines(posX: as int, posY: as int, width: as int, height: as int, color: as int) -> nthg decl


fun EndDrawing() -> nthg decl


fun CloseWindow() -> nthg decl  /; window releated  



fun GetScreenHeight() -> as int decl


fun GetScreenWidth() -> as int decl  /; Draw Shapes
  /; Draw Circle



fun GetMouseX() -> as int decl


fun GetMouseY() -> as int decl


fun DrawCircle(centerX: as int, centerY: as int, radius: as deci32, color: as int) -> nthg decl  /; Text Drawing Function



fun DrawText(text: as str, posX: as int, posY: as int, fontSize: as int, color: as int) -> nthg decl  /; Input-related functions: keyboard



fun MeasureText(text: as str, fontSize: as int) -> as int decl  /; Input-related functions: keyboard



fun IsKeyPressed(key: as int) -> as bool decl


fun IsKeyDown(key: as int) -> as bool decl  /; Format Text



fun TextFormat(text: as str) -> as str decl  /; Texture functions



fun LoadTexture(fileName: as str) -> Texture decl  /; Texture Drawing Functions 



fun DrawTexture(texture: Texture, posX: as int, posY: as int, color: as int) -> nthg decl


fun UnloadTexture(texture: Texture) -> nthg decl


fun DrawRectangleLinesEx(rec: Rectangle, lineThick: as deci32, color: as int) -> nthg decl


fun DrawTexturePro(texture: Texture, source: as deci32[4], dest: as deci32[4], origin: as deci32[2], rotation: as deci32, color: as int) -> nthg decl  /; Basic shapes drawing functions
  /;fun DrawRectanglePro(rec: Rectangle, origin: Vector2, rotation: as deci32, color: as int) -> nthg decl    
  /; logs



fun TraceLog(logLevel: as int, text: as str) -> nthg decl


fun GetTime() -> as deci decl


fun GetFrameTime() -> as deci32 decl

