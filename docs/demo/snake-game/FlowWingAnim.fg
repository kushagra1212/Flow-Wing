bring "flow-wing-raylib.fg"

type KEYS_TYPE = {
  KEY_RIGHT: int,
  KEY_LEFT: int,
  KEY_DOWN: int,
  KEY_UP: int
}
type COLORS_TYPE = {
  WHITE: int,
  RED: int,
  GREEN: int,
  BLUE: int,
  DARKBLUE: int
}
class FlowWingAnim {
  var screenWidth: int
  var screenHeight: int
  var screenName: str
  var fps: int = 30
  var colors: COLORS_TYPE
  var KEYS: KEYS_TYPE
  init(screenHeight: int, screenWidth: int, screenName: str, fps: int) -> nthg {
    self.fps = fps 
    beforeInit()
    self.screenHeight = screenHeight 
    self.screenWidth = screenWidth 
    self.screenName = screenName 
  }

  beforeInit() -> nthg {
    colors = {
      WHITE: getColor(255, 255, 255, 255),
      RED: getColor(255, 0, 0, 255),
      GREEN: getColor(0, 255, 0, 255),
      BLUE: getColor(0, 0, 255, 255),
      DARKBLUE: getColor(0, 82, 172, 255)
    } 
    KEYS = {
      KEY_RIGHT: 262,/; Key: Cursor right

      KEY_LEFT: 263,/; Key: Cursor left

      KEY_DOWN: 264,/; Key: Cursor down

      KEY_UP: 265/; Key: Cursor up

    } 
    setTargetFPS()
  }

  setTargetFPS() -> nthg {
    SetTargetFPS(fps)
  }

  getColor(r: int, g: int, b: int, a: int) -> int {
    return a * 256 * 256 * 256 + b * 256 * 256 + g * 256 + r
  }

  createWindow() -> nthg {
    InitWindow(self.screenHeight, self.screenWidth, self.screenName)
  }

  clearBackground(color: int) -> nthg {
    ClearBackground(color)
  }

  windowShouldClose() -> bool {
    return WindowShouldClose()
  }

  beginDrawing() -> nthg {
    BeginDrawing()
  }

  drawRectangle(posX: int, posY: int, width: int, height: int, color: int) -> nthg {
    DrawRectangle(posX, posY, width, height, color)
  }

  endDrawing() -> nthg {
    EndDrawing()
  }

  closeWindow() -> nthg {
    CloseWindow()
  }/; window releated  


  getScreenHeight() -> int {
    return GetScreenHeight()
  }

  getScreenWidth() -> int {
    return GetScreenWidth()
  }/; Draw Shapes
/; Draw Circle


  drawCircle(centerX: int, centerY: int, radius: deci32, color: int) -> nthg {
    DrawCircle(centerX, centerY, radius, color)
  }/; Text Drawing Function


  drawText(text: str, posX: int, posY: int, fontSize: int, color: int) -> nthg {
    DrawText(text, posX, posY, fontSize, color)
  }/; Input-related functions: keyboard

  drawTexture(texture: Texture, posX: int, posY: int, color: int) -> nthg {
    return DrawTexture(texture,posX,posY,color)
  }

  loadTexture(fileName: str) -> Texture {
    return LoadTexture(fileName)
  }


  isKeyPressed(key: int) -> bool {
    return IsKeyPressed(key)
  }

  isKeyDown(key: int) -> bool {
    return IsKeyDown(key)
  }/; Format Text


  textFormat(text: str) -> str {
    return TextFormat(text)
  }

}
