bring {FlowWingAnim} from "FlowWingAnim.fg"

const screenWidth: int = 1024
const screenHeight: int = 500
const FPS: int = 120
const side: int = 10
type Position = {
  x: deci32,
  y: deci32
}
class Bird {
  const ACTUAL_BIRD_SIZE: deci32 = 360.0d
  var birdSize: deci32 = 90.0d
  var BIRD_TIMMER: deci = 10 / FPS
  var birdTimmer: deci   
  const BIRD_SPRITE_SIZE:int = 9
  var birdSpriteIndex:int = 0
  var birdTexturePath:str
  var isBirdAlive: bool
  var birdTexture: Texture
  var birdSpritePosition: Position[9] 
  init(birdTexturePath: str) -> nthg {
    self.birdTexturePath = birdTexturePath 
    self.birdTimmer = BIRD_TIMMER
    self.isBirdAlive = true 
    self.birdSpritePosition = [{
    x: 0.0d,
    y: 0.0d
  }, {
    x: ACTUAL_BIRD_SIZE * 1,
    y: 0.0d
  }, {
    x: ACTUAL_BIRD_SIZE * 2,
    y: 0.0d
  }, {
    x: 0.0d,
    y: ACTUAL_BIRD_SIZE * 1
  }, {
    x: ACTUAL_BIRD_SIZE * 1,
    y: ACTUAL_BIRD_SIZE * 1
  }, {
    x: ACTUAL_BIRD_SIZE * 2,
    y: ACTUAL_BIRD_SIZE * 1
  }, {
    x: 0.0d,
    y: ACTUAL_BIRD_SIZE * 2
  }, {
    x: ACTUAL_BIRD_SIZE * 1,
    y: ACTUAL_BIRD_SIZE * 2
  }, {
    x: ACTUAL_BIRD_SIZE * 2,
    y: ACTUAL_BIRD_SIZE * 2
  }]
  }

  var pos:Position 

  setTexture(birdTexture: Texture) -> nthg {
  

    self.birdTexture = birdTexture 
  }

  getTexturePath() -> str {
    return self.birdTexturePath
  }

  update(frameTime: deci32) -> nthg {
    birdTimmer = birdTimmer - Decimal(frameTime) 
    if birdTimmer < 0 {
      birdTimmer = BIRD_TIMMER 
      birdSpriteIndex = birdSpriteIndex + 1 
      if birdSpriteIndex >= BIRD_SPRITE_SIZE {
        birdSpriteIndex = 0 
      }
      pos.y = pos.y + frameTime * (1+1*(-150))
    }

  }

  isTextureLoaded() -> bool {
    return self.birdTexture.id != 0
  }

  getSource() -> deci32[4] {
    return [birdSpritePosition[birdSpriteIndex].x, birdSpritePosition[birdSpriteIndex].y, ACTUAL_BIRD_SIZE, ACTUAL_BIRD_SIZE]
  }

  getDistination() -> deci32[4] {
    return [Decimal32(screenWidth / 3 - birdSize / 2), Decimal32(screenHeight / 2 - birdSize / 2), birdSize, birdSize]
  }

  getOrigin() -> deci32[2] {
    return [self.pos.x, self.pos.y]
  }

  getRotation() -> deci32 {
    return 0.0d
  }

  getTexture() -> Texture {
    return self.birdTexture
  }

  updateY(frameTime: deci32) -> nthg {
    pos.y = pos.y + frameTime * (1 + 1*(300))
  }

}

class Cloud {
  type AttributeType = {
    source: deci32[4],
    distination: deci32[4],
    origin: deci32[2],
    rotation: deci32
  }
  var clouds: AttributeType[5]
  var cloudTexture: Texture
  var texturePath: str

  init(texturePath: str) -> nthg {

    self.texturePath = texturePath

    clouds = [
    {
      source: [0.0d,0.0d,250.0d,166.0d],
      distination: [0.0d,0.0d,Decimal32(250.0/166*(100)),100.0d],
      origin: [ Decimal32(getRandomNumber(-1*screenWidth,0)),  -1*Decimal32(getRandomNumber(0,Int32(screenHeight/3)))],
      rotation: 0.0d
    },

    {
      source: [250.0d,0.0d,250.0d,166.0d],
      distination: [0.0d,0.0d,Decimal32(250.0/166*(100)),100.0d],
      origin: [ Decimal32(getRandomNumber(-1*screenWidth,0)),   -1*Decimal32(getRandomNumber(0,Int32(screenHeight/3)))],
      rotation: 0.0d
    },

    {
      source: [0.0d,166.0d,500.0d,166.0d],
      distination: [0.0d,0.0d,Decimal32(250.0/166*(100)),100.0d],
      origin: [ Decimal32(getRandomNumber(-1*screenWidth,0)), -1*Decimal32(getRandomNumber(0,Int32(screenHeight/3)))],
      rotation: 0.0d
    },

    {
      source: [0.0d,332.0d,250.0d,166.0d],
      distination: [0.0d,0.0d,Decimal32(250.0/166*(100)),100.0d],
      origin: [ Decimal32(getRandomNumber(-1*screenWidth,0)),   -1*Decimal32(getRandomNumber(0,Int32(screenHeight/3)))],
      rotation: 0.0d
    },

    {
      source: [250.0d,332.0d,250.0d,166.0d],
      distination: [0.0d,0.0d,Decimal32(250.0/166*(100)),100.0d],
      origin: [ Decimal32(getRandomNumber(-1*screenWidth,0)),  -1*Decimal32(getRandomNumber(0,Int32(screenHeight/3)))],
      rotation: 0.0d
    },
    ]
  }

  setTexture(cloudTexture: Texture) -> nthg {
    self.cloudTexture = cloudTexture
  } 

  getTexture() -> Texture {
    return self.cloudTexture
  }

  getTexturePath() -> str {
    return self.texturePath
  }

  update(frameTime: deci32) -> nthg {

    for var i = 0 to 4 {  
      clouds[i].origin[0] = clouds[i].origin[0] + frameTime * ((10))
      if clouds[i].origin[0] > 250.0d {
        clouds[i].origin[0] = Decimal32(getRandomNumber(-2*screenWidth,-1*screenWidth))
        clouds[i].origin[1] = -1*Decimal32(getRandomNumber(0,Int32(screenHeight/3)))
      }
    }
  }

  draw(inout fgAnim: FlowWingAnim) -> nthg {

  for var i = 0 to 4 {
    DrawTexturePro(cloudTexture,clouds[i].source,clouds[i].distination,clouds[i].origin,clouds[i].rotation,fgAnim.colors.WHITE)
  }
  }
}

fun main() -> int {
{
    var backgroundTexture: Texture = LoadTexture("assets/skyBackground.png")
  }
return 2
}
main()
