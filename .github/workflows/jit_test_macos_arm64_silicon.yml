name: Test JIT on macOS (arm64_silicon)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-on-macos:
    # Use the latest native macOS runner provided by GitHub
    runs-on: macos-14

    steps:
      # 1. Check out your repository code
      # This is the equivalent of the `COPY` commands in your Dockerfile
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Install all required dependencies using Homebrew
      # This step replaces your `apt-get install` commands.
      # Note: Xcode Command Line Tools (Clang, g++, build-essential) are pre-installed.
      - name: Install and Verify Build Tools
        run: |
          # 1. Install all required packages in a single command
          brew install wget ninja ccache automake autoconf libtool llvm@17

          # 2. Verify all installed versions
          echo "--- Verifying Tool Versions ---"
          wget --version
          ninja --version
          ccache --version
          automake --version
          autoconf --version

          # Use 'glibtool' to check the version of Homebrew's libtool
          glibtool --version

          # Verify the Homebrew-installed LLVM/Clang
          $(brew --prefix llvm@17)/bin/clang --version

      # 3. Set up environment variables for the Clang compiler
      # This replaces the `ENV` commands and points to the Homebrew-installed Clang
      - name: Set Compiler Environment
        run: |
          echo "CC=$(brew --prefix llvm@17)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@17)/bin/clang++" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix llvm@17)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix llvm@17)/include" >> $GITHUB_ENV

      # 4. Run your build command
      # This is the final `RUN` command from your Dockerfile
      - name: Test JIT
        run: make test-jit
