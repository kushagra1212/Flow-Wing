bring Err
bring Str
bring Vec

fun start_server(port: as int) -> as nthg decl


fun flush() -> as nthg decl


fun set_route(method: as str, path: as str, handler: unknown, handler2: unknown) -> as nthg decl


fun set_middleware(middleware: unknown, handler: unknown) -> as nthg decl


fun send_response(client_socket: as int, status: as str, content_type: as str, body: as str, keepAlive: as int, contentLength: as int) -> as str decl


fun send(socket: as int, data: as str, len: as int, flags: as int) -> as nthg decl


fun replace_all(source: as str, pattern: as str, replacement: as str) -> as str decl


fun split(s: str, delimiter: str) -> Vec::String {
  var result: Vec::String = new Vec::String()
  var part: str = ""
  for var i = 0 to Str::length(s) - 1 {
    if (Str::int8ToString(Int8(s[i])) == delimiter) {
      if (Str::length(part)) {
        result.add(part)
      }
      part = "" 
    } or if (i + 1 < Str::length(s) && (String(Str::int8ToString(Int8(s[i])) + Str::int8ToString(Int8(s[i + 1])))) == delimiter) {
      if (Str::length(part)) {
        result.add(part)
      }
      i = i + 1 
      part = "" 
    } else {
      part = part + Str::int8ToString(Int8(s[i])) 
    }
  }
  if Str::length(part) > 0 {
    result.add(part)
  }
  return result
}

module [Vortex]
var DELIMITER: str = "~"
fun renderTemplate(inout template: str, inout variables: Vec::String) -> str {
  for var i = 0 to variables.size() - 1 {
    const values: Vec::String = split(variables.get(i), Vortex::DELIMITER)
    const key: str = "{{" + values.get(0) + "}}"
    const value: str = values.get(1)
    template = replace_all(template, key, value) 
  }
  return template
}


type Header = {
  Host: str,
  Connection: str,
  sec_ch_ua: str,
  sec_ch_ua_mobile: bool,
  sec_ch_ua_platform: str,
  Upgrade_Insecure_Requests: int,
  User_Agent: str,
  Sec_Purpose: str,
  Purpose: str,
  Accept: str,
  Sec_Fetch_Site: str,
  Sec_Fetch_Mode: str,
  Sec_Fetch_User: bool,
  Sec_Fetch_Dest: str,
  Accept_Encoding: str,
  Accept_Language: str,
  content_type: str,
  content_length: int
}
type HttpRequest = {
  method: str,
  endpoint: str,
  version: str,
  headers: Vortex::Header,
  body: str
}
type HttpResponseType = {
  status: int,
  content_type: str,
  body: str,
  keepAlive: int
}
fun statusString(status: int) -> str {
  if (status == 100) {
    return "100 Continue"
  } or if (status == 101) {
    return "101 Switching Protocols"
  } or if (status == 200) {
    return "200 OK"
  } or if status == 201 {
    return "201 Created"
  } or if status == 202 {
    return "202 Accepted"
  } or if status == 204 {
    return "204 No Content"
  } or if status == 301 {
    return "301 Moved Permanently"
  } or if status == 302 {
    return "302 Found"
  } or if status == 303 {
    return "303 See Other"
  } or if status == 304 {
    return "304 Not Modified"
  } or if status == 307 {
    return "307 Temporary Redirect"
  } or if status == 308 {
    return "308 Permanent Redirect"
  } or if status == 400 {
    return "400 Bad Request"
  } or if status == 401 {
    return "401 Unauthorized"
  } or if status == 403 {
    return "403 Forbidden"
  } or if status == 404 {
    return "404 Not Found"
  } or if status == 405 {
    return "405 Method Not Allowed"
  } or if status == 408 {
    return "408 Request Timeout"
  } or if status == 500 {
    return "500 Internal Server Error"
  } or if status == 501 {
    return "501 Not Implemented"
  } or if status == 502 {
    return "502 Bad Gateway"
  } or if status == 503 {
    return "503 Service Unavailable"
  } or if status == 504 {
    return "504 Gateway Timeout"
  } else {
    return String(status)
  }
}




class HttpResponse {
  var res: Vortex::HttpResponseType
  var clientSocket: int
  init(clientSocket: int) -> nthg {
    self.clientSocket = clientSocket 
  }


  send(res: Vortex::HttpResponseType) -> Err::Result {
    res.keepAlive = 1 
    if (res.content_type == "") {
      res.content_type = "text/plain" 
    }
    if (res.body == "") {
      return new Err::Result("Could not send response", Err::CODE.FAILED, "In send")
    }
    var error: str = send_response(clientSocket, Vortex::statusString(res.status), res.content_type, res.body, res.keepAlive, 0)
    if (error) {
      return new Err::Result(error, Err::CODE.FAILED, "In send")
    }
    return Nir
  }


}
fun parseRequest(req_str: as str) -> Vortex::HttpRequest, Err::Result {
  var lines: Vec::String = split(req_str, "\n")
  var method: str, endpoint: str, version: str    /; Headers start from the second line onwards

  if (lines.size() == 0) {
    return {

    }, new Err::Result("Could not parse request", Err::CODE.FAILED, "In parseRequest")
  }
  var body: str
  var hasBody = false
  var header_map: Vortex::Header
  for var i = 0 to lines.size() - 1 {
    if i == 0 {
      var firstLineParts: Vec::String = split(lines.get(i), " ")
      method, endpoint, version = firstLineParts.get(0), firstLineParts.get(1), firstLineParts.get(2)        /; Headers start from the second line onwards
 
    } else {
      var header_parts: Vec::String = split(lines.get(i), ":")
      if (hasBody) {
        body = body + lines.get(i) 
        continue
      }
      if (header_parts.size() > 1) {
        header_parts.set(1, Str::trimInPlace(header_parts.get(1)))
      }
      if header_parts.get(0) == "Host" {
        header_map.Host = header_parts.get(1) 
      } or if header_parts.get(0) == "Connection" {
        header_map.Connection = header_parts.get(1) 
      } or if header_parts.get(0) == "sec-ch-ua" {
        header_map.sec_ch_ua = header_parts.get(1) 
      } or if header_parts.get(0) == "sec-ch-ua-mobile" {
        header_map.sec_ch_ua_mobile = header_parts.get(1) == "?1" 
      } or if header_parts.get(0) == "sec-ch-ua-platform" {
        header_map.sec_ch_ua_platform = header_parts.get(1) 
      } or if header_parts.get(0) == "Upgrade-Insecure-Requests" {
        header_map.Upgrade_Insecure_Requests = Int32(header_parts.get(1)) 
      } or if header_parts.get(0) == "User-Agent" {
        header_map.User_Agent = header_parts.get(1) 
      } or if header_parts.get(0) == "Accept" {
        header_map.Accept = header_parts.get(1) 
      } or if header_parts.get(0) == "Sec-Fetch-Site" {
        header_map.Sec_Fetch_Site = header_parts.get(1) 
      } or if header_parts.get(0) == "Sec-Fetch-Mode" {
        header_map.Sec_Fetch_Mode = header_parts.get(1) 
      } or if header_parts.get(0) == "Sec-Fetch-User" {
        header_map.Sec_Fetch_User = header_parts.get(1) == "?1" 
      } or if header_parts.get(0) == "Sec-Fetch-Dest" {
        header_map.Sec_Fetch_Dest = header_parts.get(1) 
      } or if header_parts.get(0) == "Accept-Encoding" {
        header_map.Accept_Encoding = header_parts.get(1) 
      } or if header_parts.get(0) == "Accept-Language" {
        header_map.Accept_Language = header_parts.get(1) 
      } or if header_parts.get(0) == "Content-Type" {
        header_map.content_type = header_parts.get(1) 
      } or if header_parts.get(0) == "Content-Length" {
        header_map.content_length = Int32(header_parts.get(1)) + 0 
      } or if header_parts.get(0) == "\r" {
        hasBody = true 
        continue
      }
    }
  }
  return {
    method: method,
    endpoint: endpoint,
    version: version,
    headers: header_map,
    body: Str::trimInPlace(body)
  }, Nir
}


fun middlewareFunction(client_socket: as int, req_str: as str, endpoint: as str, customMiddleware: [( Vortex::HttpRequest, Vortex::HttpResponse ) -> nthg] ) -> as nthg {
  var Req: Vortex::HttpRequest, err: Err::Result = Vortex::parseRequest(req_str)
  customMiddleware(Req, new Vortex::HttpResponse(client_socket))
}


fun middleHandler(client_socket: as int, req: as str, endpoint: as str, customRouteHandler: [( Vortex::HttpRequest, Vortex::HttpResponse ) -> nthg] ) -> as nthg {
  var Req: Vortex::HttpRequest, err: Err::Result = Vortex::parseRequest(req)
  customRouteHandler(Req, new Vortex::HttpResponse(client_socket))
}


class Server {
  var port: int
  init(port: int) -> nthg {
    self.port = port 
  }


  addMiddleware(customMiddleware: [( Vortex::HttpRequest, Vortex::HttpResponse ) -> nthg] ) -> as nthg {
    set_middleware(Vortex::middlewareFunction, customMiddleware)
  }


  start() -> as nthg {
    start_server(self.port)
  }


  setRoute(method: as str, path: as str, customRouteHandler: [( Vortex::HttpRequest, Vortex::HttpResponse ) -> nthg] ) -> as nthg {
    set_route(method, path, Vortex::middleHandler, customRouteHandler)
  }


}

