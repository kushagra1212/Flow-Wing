{
  "name": "FlowWing",
  "scopeName": "source.fg",
  "fileTypes": ["fg"],
  "patterns": [
    {
      "include": "#punctuation"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#modules"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#lvariables"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#attributes"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.fg",
          "match": "/;.*$"
        },
        {
          "name": "comment.block.fg",
          "begin": "/#",
          "end": "#/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "control flow keywords",
          "name": "keyword.control.fg",
          "match": "\\b(break|continue|else|for|if|or if|return|while)\\b"
        },
        {
          "comment": "storage keywords",
          "name": "keyword.other.fg storage.type.fg",
          "match": "\\b(expose|var)\\b"
        },
        {
          "comment": "const keyword",
          "name": "storage.modifier.fg",
          "match": "\\b(const)\\b"
        },
        {
          "comment": "type keyword",
          "name": "keyword.declaration.type.fg storage.type.fg",
          "match": "\\b(type)\\b"
        },
        {
          "comment": "logical operators",
          "name": "keyword.operator.logical.fg",
          "match": "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)"
        },
        {
          "comment": "dashrocket, skinny arrow",
          "name": "keyword.operator.arrow.skinny.fg",
          "match": "->"
        },
        {
          "comment": "math operators",
          "name": "keyword.operator.math.fg",
          "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
        },
        {
          "comment": "comparison operators",
          "name": "keyword.operator.comparison.fg",
          "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
        },
        {
          "comment": "less than, greater than (special case)",
          "match": "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))",
          "captures": {
            "1": {
              "name": "punctuation.brackets.round.fg"
            },
            "2": {
              "name": "punctuation.brackets.square.fg"
            },
            "3": {
              "name": "punctuation.brackets.curly.fg"
            },
            "4": {
              "name": "keyword.operator.comparison.fg"
            },
            "5": {
              "name": "punctuation.brackets.round.fg"
            },
            "6": {
              "name": "punctuation.brackets.square.fg"
            },
            "7": {
              "name": "punctuation.brackets.curly.fg punctuation.definition.brackets.curly.fg"
            }
          }
        },
        {
          "comment": "fn",
          "name": "keyword.other.fun.fg",
          "match": "\\bfun\\b"
        },
        {
          "comment": "single equal",
          "name": "keyword.operator.assignment.equal.fg",
          "match": "(?<![<>])=(?!=|>)"
        },
        {
          "comment": "dot access",
          "name": "keyword.operator.access.dot.fg",
          "match": "\\.(?!\\.)"
        },
        {
          "name": "keyword.other.fg",
          "match": "\\b(inout|as|decl|const|var|type|init|class|if|else|for|while|return|new)\\b"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "keyword.import.fg",
          "match": "\\bbring\\b"
        },
        {
          "name": "keyword.from.fg",
          "match": "\\bfrom\\b"
        }
      ]
    },
    "modules": {
      "patterns": [
        {
          "name": "keyword.module.fg",
          "match": "\\bmodule\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.fg",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.fg",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.fg",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.fg",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.fg",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.fg",
          "match": "\\b\\d+\\.\\d+(d|f)?\\b"
        },
        {
          "name": "constant.numeric.integer.fg",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.fg",
          "match": "\\b(int|deci32|str|bool|nthg|deci)\\b"
        },
        {
          "comment": "struct declarations",
          "match": "\\b(type)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.type.fg storage.type.fg"
            },
            "2": {
              "name": "entity.name.type.declaration.fg"
            }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.fg",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "0": { "name": "entity.name.function.fg" }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.fg",
          "match": "\\{|\\}|\\+|\\-|\\*|\\/|\\%|\\=|\\!|\\>|\\<|\\&|\\||\\^|\\~|\\?"
        }
      ]
    },
    "lvariables": {
      "patterns": [
        {
          "comment": "self",
          "name": "variable.language.self.fg",
          "match": "\\bself\\b"
        },
        {
          "comment": "super",
          "name": "variable.language.super.fg",
          "match": "\\bsuper\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "comment": "variables",
          "name": "variable.other.fg",
          "match": "\\b(?<!(?<!\\.)\\.)(?:r#(?!(self|super)))?[a-z0-9_]+\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "comment": "comma",
          "name": "punctuation.comma.fg",
          "match": ","
        },
        {
          "comment": "curly braces",
          "name": "punctuation.brackets.curly.fg",
          "match": "[{}]"
        },
        {
          "comment": "parentheses, round brackets",
          "name": "punctuation.brackets.round.fg",
          "match": "[()]"
        },
        {
          "comment": "semicolon",
          "name": "punctuation.semi.fg",
          "match": ";"
        },
        {
          "comment": "square brackets",
          "name": "punctuation.brackets.square.fg",
          "match": "[\\[\\]]"
        },
        {
          "comment": "angle brackets",
          "name": "punctuation.brackets.angle.fg",
          "match": "(?<!=)[<>]"
        }
      ]
    },
    "attributes": {
      "comment": "attributes",
      "name": "meta.attribute.fg",
      "begin": "(#)(\\!?)(\\[)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.attribute.fg"
        },
        "3": {
          "name": "punctuation.brackets.attribute.fg"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.brackets.attribute.fg"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#types"
        }
      ]
    }
  }
}
